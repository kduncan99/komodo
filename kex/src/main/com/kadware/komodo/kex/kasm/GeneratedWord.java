/*
 * Copyright (c) 2018-2020 by Kurt Duncan - All Rights Reserved
 */

package com.kadware.komodo.kex.kasm;

import com.kadware.komodo.kex.RelocatableModule;
import com.kadware.komodo.kex.kasm.dictionary.IntegerValue;
import java.util.LinkedList;
import java.util.List;

/**
 * Describes a single word which has been generated by the assembler,
 * complete with attached information regarding any relocations which need to be applied.
 */
@SuppressWarnings("Duplicates")
class GeneratedWord {

    final TextLine _topLevelTextLine;
    final Locale _locale;
    final int _locationCounterIndex;
    int _locationCounterOffset;
    IntegerValue _value;

    /**
     * Tracks the location of the line of source code which produced this object
     * @param topLevelTextLine reference to the TextLine object responsible for generating this word
     * @param locale line specifier of the line of source code which directly produced this word, and the corresponding column
     * @param locationCounterIndex what pool contains this
     * @param locationCounterOffset where is this within that pool
     * @param value IntegerValue defining the the various field values and references for this word
     */
    GeneratedWord(
        final TextLine topLevelTextLine,
        final Locale locale,
        final int locationCounterIndex,
        final int locationCounterOffset,
        final IntegerValue value
    ) {
        _locale = locale;
        _topLevelTextLine = topLevelTextLine;
        _locationCounterIndex = locationCounterIndex;
        _locationCounterOffset = locationCounterOffset;
        _value = value;
    }

    /**
     * Constructs a RelocatableWord object based upon the given IntegerValue.
     * Should be called after we've resolved all references local to the containing module.
     */
    RelocatableModule.RelocatableWord produceRelocatableWord() {
        List<RelocatableModule.RelocatableItem> relItems = new LinkedList<>();
        for (int urx = 0; urx < _value._references.length; ++urx) {
            UnresolvedReference ur = _value._references[urx];
            if (ur instanceof UnresolvedReferenceToLabel) {
                UnresolvedReferenceToLabel url = (UnresolvedReferenceToLabel) ur;
                relItems.add(new RelocatableModule.RelocatableItemSymbol(url._label,
                                                                         url._fieldDescriptor,
                                                                         url._isNegative));
            } else if (ur instanceof UnresolvedReferenceToLocationCounter) {
                UnresolvedReferenceToLocationCounter urlc = (UnresolvedReferenceToLocationCounter) ur;
                relItems.add(new RelocatableModule.RelocatableItemLocationCounter(urlc._locationCounterIndex,
                                                                                  urlc._fieldDescriptor,
                                                                                  urlc._isNegative));
            }
        }

        //  TODO should we verify that _value is within 36 bits?
        return new RelocatableModule.RelocatableWord(new Word36(_value._value.get().longValue()),
                                                     relItems.toArray(new RelocatableModule.RelocatableItem[0]));
    }

    @Override
    public String toString() {
        return String.format("{%s:%s -> %s}", _locale, _topLevelTextLine._text, _value);
    }
}
